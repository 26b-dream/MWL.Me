# Generated by Django 4.0.6 on 2022-07-27 05:10

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('info_timestamp', models.DateTimeField()),
                ('info_modified_timestamp', models.DateTimeField()),
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('main_picture_medium', models.CharField(max_length=255)),
                ('main_picture_large', models.CharField(max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(null=True)),
                ('synopsis', models.TextField()),
                ('mean', models.FloatField(null=True)),
                ('rank', models.PositiveSmallIntegerField(null=True)),
                ('popularity', models.PositiveSmallIntegerField()),
                ('num_list_users', models.PositiveSmallIntegerField()),
                ('num_scoring_users', models.PositiveSmallIntegerField()),
                ('nsfw', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('media_type', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=255)),
                ('background', models.TextField()),
                ('sparse', models.BooleanField()),
                ('num_episodes', models.PositiveSmallIntegerField()),
                ('start_season_year', models.PositiveSmallIntegerField(null=True)),
                ('start_season_season', models.CharField(max_length=255)),
                ('broadcast_day_of_the_week', models.CharField(max_length=255)),
                ('broadcast_start_time', models.TimeField(null=True)),
                ('source', models.CharField(max_length=255)),
                ('average_episode_duration', models.PositiveSmallIntegerField()),
                ('rating', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'anime',
            },
        ),
        migrations.CreateModel(
            name='AnimeAlternativeTitles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'anime_titles',
            },
        ),
        migrations.CreateModel(
            name='AnimeGenres',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'anime_genres',
            },
        ),
        migrations.CreateModel(
            name='AnimeRecommendation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('recommendations', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'anime_recs',
            },
        ),
        migrations.CreateModel(
            name='AnimeRelatedAnime',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('relationship', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'anime_related_anime',
            },
        ),
        migrations.CreateModel(
            name='AnimeRelatedManga',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('relationship', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'anime_related_manga',
            },
        ),
        migrations.CreateModel(
            name='Genres',
            fields=[
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'genres',
            },
        ),
        migrations.CreateModel(
            name='ImportQue',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=255)),
                ('key', models.CharField(max_length=255)),
                ('priority', models.PositiveSmallIntegerField()),
                ('minimum_info_timestamp', models.DateTimeField(null=True)),
                ('minimum_modified_timestamp', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'import_que',
            },
        ),
        migrations.CreateModel(
            name='Manga',
            fields=[
                ('info_timestamp', models.DateTimeField()),
                ('info_modified_timestamp', models.DateTimeField()),
                ('id', models.PositiveSmallIntegerField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('main_picture_medium', models.CharField(max_length=255)),
                ('main_picture_large', models.CharField(max_length=255)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(null=True)),
                ('synopsis', models.TextField()),
                ('mean', models.FloatField(null=True)),
                ('rank', models.PositiveSmallIntegerField(null=True)),
                ('popularity', models.PositiveSmallIntegerField()),
                ('num_list_users', models.PositiveSmallIntegerField()),
                ('num_scoring_users', models.PositiveSmallIntegerField()),
                ('nsfw', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('media_type', models.CharField(max_length=255)),
                ('status', models.CharField(max_length=255)),
                ('background', models.TextField()),
                ('sparse', models.BooleanField()),
                ('alternative_titles_en_title', models.CharField(max_length=255)),
                ('alternative_titles_ja_title', models.CharField(max_length=255)),
                ('num_volumes', models.PositiveSmallIntegerField()),
                ('num_chapters', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'manga',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('info_timestamp', models.DateTimeField()),
                ('info_modified_timestamp', models.DateTimeField()),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('anime_count', models.PositiveSmallIntegerField(null=True)),
                ('manga_count', models.PositiveSmallIntegerField(null=True)),
                ('average_anime_score', models.FloatField(null=True)),
                ('average_manga_score', models.FloatField(null=True)),
                ('anime_list_private', models.BooleanField()),
                ('manga_list_private', models.BooleanField()),
                ('last_successful_anime_list_import', models.DateTimeField(null=True)),
                ('last_successful_manga_list_import', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='UserManga',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.PositiveSmallIntegerField()),
                ('score', models.PositiveSmallIntegerField()),
                ('updated_at', models.DateTimeField()),
                ('finish_date', models.DateField(null=True)),
                ('is_rereading', models.BooleanField()),
                ('num_volumes_read', models.PositiveSmallIntegerField()),
                ('num_chapters_read', models.PositiveSmallIntegerField()),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserManga_manga', to='main.manga')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserManga_user', to='main.user')),
            ],
            options={
                'db_table': 'user_manga',
            },
        ),
        migrations.CreateModel(
            name='UserAnime',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.PositiveSmallIntegerField()),
                ('score', models.PositiveSmallIntegerField()),
                ('updated_at', models.DateTimeField()),
                ('finish_date', models.DateField(null=True)),
                ('num_episodes_watched', models.PositiveSmallIntegerField(null=True)),
                ('is_rewatching', models.BooleanField()),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserAnime_anime', to='main.anime')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserAnime_user', to='main.user')),
            ],
            options={
                'db_table': 'user_anime',
            },
        ),
        migrations.CreateModel(
            name='MangaRelatedManga',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('relationship', models.CharField(max_length=255)),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MangaRelatedManga_media', to='main.manga')),
                ('related_media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MangaRelatedManga_related_media', to='main.manga')),
            ],
            options={
                'db_table': 'manga_related_manga',
            },
        ),
        migrations.CreateModel(
            name='MangaRelatedAnime',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('relationship', models.CharField(max_length=255)),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MangaRelatedAnime_media', to='main.manga')),
                ('related_media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MangaRelatedAnime_related_media', to='main.anime')),
            ],
            options={
                'db_table': 'manga_related_anime',
            },
        ),
        migrations.CreateModel(
            name='MangaRecommendation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('recommendations', models.PositiveSmallIntegerField()),
                ('media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MangaRecommendation_media', to='main.manga')),
                ('recommended_media', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='MangaRecommendation_recommended_media', to='main.manga')),
            ],
            options={
                'db_table': 'manga_recs',
            },
        ),
        migrations.AddConstraint(
            model_name='importque',
            constraint=models.UniqueConstraint(fields=('type', 'key'), name='ImportQue_type_media_id'),
        ),
        migrations.AddField(
            model_name='animerelatedmanga',
            name='media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AnimeRelatedManga_media', to='main.anime'),
        ),
        migrations.AddField(
            model_name='animerelatedmanga',
            name='related_media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AnimeRelatedManga_related_media', to='main.manga'),
        ),
        migrations.AddField(
            model_name='animerelatedanime',
            name='media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AnimeRelatedAnime_media', to='main.anime'),
        ),
        migrations.AddField(
            model_name='animerelatedanime',
            name='related_media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AnimeRelatedAnime_related_media', to='main.anime'),
        ),
        migrations.AddField(
            model_name='animerecommendation',
            name='media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AnimeRecommendation_media', to='main.anime'),
        ),
        migrations.AddField(
            model_name='animerecommendation',
            name='recommended_media',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='AnimeRecommendation_recommended_media', to='main.anime'),
        ),
        migrations.AddField(
            model_name='animegenres',
            name='anime',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.anime'),
        ),
        migrations.AddField(
            model_name='animegenres',
            name='genre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.genres'),
        ),
        migrations.AddField(
            model_name='animealternativetitles',
            name='anime',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.anime'),
        ),
        migrations.AddConstraint(
            model_name='usermanga',
            constraint=models.UniqueConstraint(fields=('user', 'media'), name='UserManga_user_manga'),
        ),
        migrations.AddConstraint(
            model_name='useranime',
            constraint=models.UniqueConstraint(fields=('user', 'media'), name='UserAnime_user_anime'),
        ),
        migrations.AddConstraint(
            model_name='mangarelatedmanga',
            constraint=models.UniqueConstraint(fields=('media', 'related_media', 'relationship'), name='MangaRelatedManga_media_related_media_relationship'),
        ),
        migrations.AddConstraint(
            model_name='mangarelatedanime',
            constraint=models.UniqueConstraint(fields=('media', 'related_media', 'relationship'), name='MangaRelatedAnime_media_related_media_relationship'),
        ),
        migrations.AddConstraint(
            model_name='mangarecommendation',
            constraint=models.UniqueConstraint(fields=('media', 'recommended_media'), name='MangaRecommendation_media_recommended_media'),
        ),
        migrations.AddConstraint(
            model_name='animerelatedmanga',
            constraint=models.UniqueConstraint(fields=('media', 'related_media', 'relationship'), name='AnimeRelatedManga_media_related_media_relationship'),
        ),
        migrations.AddConstraint(
            model_name='animerelatedanime',
            constraint=models.UniqueConstraint(fields=('media', 'related_media', 'relationship'), name='AnimeRelatedAnime_media_related_media_relationship'),
        ),
        migrations.AddConstraint(
            model_name='animerecommendation',
            constraint=models.UniqueConstraint(fields=('media', 'recommended_media'), name='AnimeRecommendation_media_recommended_media'),
        ),
    ]
